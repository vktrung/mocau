basePath: /v1
definitions:
  common.AppError:
    properties:
      key:
        type: string
      log:
        type: string
      message:
        type: string
      status_code:
        type: integer
    type: object
  common.Image:
    properties:
      cloud_name:
        type: string
      extension:
        type: string
      height:
        type: integer
      id:
        type: integer
      url:
        type: string
      width:
        type: integer
    type: object
  common.Response:
    properties:
      data: {}
    type: object
  mocau-backend_module_order_model.OrderItemCreate:
    properties:
      price:
        description: Optional, sẽ lấy giá hiện tại nếu không có
        type: number
      product_id:
        type: integer
      quantity:
        minimum: 1
        type: integer
    required:
    - product_id
    - quantity
    type: object
  mocau-backend_module_orderitem_model.OrderItemCreate:
    properties:
      created_at:
        type: string
      id:
        type: integer
      order_id:
        type: integer
      price:
        type: number
      product_id:
        type: integer
      quantity:
        type: integer
      updated_at:
        type: string
    type: object
  model.Blog:
    properties:
      author_id:
        type: integer
      content:
        description: HTML content
        type: string
      created_at:
        type: string
      id:
        type: integer
      image:
        $ref: '#/definitions/common.Image'
      status:
        description: draft, published
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  model.BlogWithAuthor:
    properties:
      author:
        properties:
          full_name:
            type: string
          id:
            type: integer
        type: object
      author_id:
        type: integer
      content:
        description: HTML content
        type: string
      created_at:
        type: string
      id:
        type: integer
      image:
        $ref: '#/definitions/common.Image'
      status:
        description: draft, published
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  model.CategoryCreate:
    properties:
      category_name:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      status:
        type: string
      updated_at:
        type: string
    type: object
  model.CategoryUpdate:
    properties:
      category_name:
        type: string
      description:
        type: string
      status:
        type: string
    type: object
  model.Order:
    properties:
      completed_at:
        type: string
      created_at:
        type: string
      customer_email:
        type: string
      customer_name:
        description: Thông tin khách hàng
        type: string
      customer_phone:
        type: string
      id:
        type: integer
      notes:
        type: string
      order_number:
        type: string
      processed_at:
        type: string
      processed_by:
        description: Thông tin xử lý
        type: integer
      processor:
        allOf:
        - $ref: '#/definitions/model.User'
        description: Relations
      shipping_address:
        type: string
      status:
        $ref: '#/definitions/model.OrderStatus'
      total_amount:
        type: number
      updated_at:
        type: string
    type: object
  model.OrderCreate:
    properties:
      created_at:
        type: string
      customer_email:
        type: string
      customer_name:
        description: Thông tin khách hàng
        type: string
      customer_phone:
        type: string
      id:
        type: integer
      notes:
        type: string
      order_items:
        description: Danh sách sản phẩm (có thể tạo cùng lúc hoặc tạo riêng)
        items:
          $ref: '#/definitions/mocau-backend_module_order_model.OrderItemCreate'
        type: array
      shipping_address:
        type: string
      total_amount:
        type: number
      updated_at:
        type: string
    type: object
  model.OrderItem:
    properties:
      created_at:
        type: string
      id:
        type: integer
      order:
        allOf:
        - $ref: '#/definitions/model.Order'
        description: Relations
      order_id:
        type: integer
      price:
        type: number
      product:
        $ref: '#/definitions/model.Product'
      product_id:
        type: integer
      quantity:
        type: integer
      updated_at:
        type: string
    type: object
  model.OrderItemUpdate:
    properties:
      price:
        type: number
      quantity:
        type: integer
    type: object
  model.OrderStatus:
    enum:
    - pending
    - confirmed
    - completed
    - cancelled
    type: string
    x-enum-comments:
      OrderStatusCancelled: Đã hủy
      OrderStatusCompleted: Hoàn thành
      OrderStatusConfirmed: Đã xác nhận
      OrderStatusPending: Chờ xử lý
    x-enum-descriptions:
    - Chờ xử lý
    - Đã xác nhận
    - Hoàn thành
    - Đã hủy
    x-enum-varnames:
    - OrderStatusPending
    - OrderStatusConfirmed
    - OrderStatusCompleted
    - OrderStatusCancelled
  model.OrderUpdate:
    properties:
      completed_at:
        type: string
      customer_email:
        type: string
      customer_name:
        type: string
      customer_phone:
        type: string
      notes:
        type: string
      processed_at:
        type: string
      processed_by:
        type: integer
      shipping_address:
        type: string
      status:
        $ref: '#/definitions/model.OrderStatus'
    type: object
  model.Product:
    properties:
      category_id:
        type: integer
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      image:
        $ref: '#/definitions/common.Image'
      name:
        type: string
      price:
        type: number
      stock:
        type: integer
      updated_at:
        type: string
    type: object
  model.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      id:
        type: integer
      phone:
        type: string
      role:
        $ref: '#/definitions/model.UserRole'
      status:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  model.UserCreate:
    properties:
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      id:
        type: integer
      password:
        type: string
      phone:
        type: string
      status:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  model.UserLogin:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  model.UserRole:
    enum:
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - RoleUser
    - RoleAdmin
  model.UserUpdate:
    properties:
      email:
        type: string
      full_name:
        type: string
      phone:
        type: string
    type: object
  storage.OrderStats:
    properties:
      cancelled_orders:
        type: integer
      completed_orders:
        type: integer
      confirmed_orders:
        type: integer
      pending_orders:
        type: integer
      today_orders:
        type: integer
      today_revenue:
        type: number
      total_orders:
        type: integer
      total_revenue:
        type: number
    type: object
host: localhost:3000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API documentation for Mocau Backend
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Mocau Backend API
  version: "1.0"
paths:
  /blogs:
    get:
      consumes:
      - application/json
      description: Get list of all blogs
      parameters:
      - description: Filter by status (draft, published)
        in: query
        name: status
        type: string
      - description: Filter by author ID
        in: query
        name: author_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Blog'
                  type: array
              type: object
        "500":
          description: Internal error
          schema:
            $ref: '#/definitions/common.Response'
      summary: List all blogs
      tags:
      - blogs
    post:
      consumes:
      - multipart/form-data
      description: Create a new blog with title, content, image and status. Author
        will be set automatically from logged in user.
      parameters:
      - description: Blog title
        in: formData
        name: title
        required: true
        type: string
      - description: Blog HTML content
        in: formData
        name: content
        required: true
        type: string
      - description: Blog status (draft or published)
        in: formData
        name: status
        type: string
      - description: Blog image
        in: formData
        name: image
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Blog created successfully
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  type: boolean
              type: object
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/common.Response'
      security:
      - BearerAuth: []
      summary: Create a new blog
      tags:
      - blogs
  /blogs/{id}:
    delete:
      description: Set deleted_at timestamp instead of removing the record. Only blog
        author can delete their own blog.
      parameters:
      - description: Blog ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  type: boolean
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.AppError'
        "403":
          description: Forbidden - not blog author
          schema:
            $ref: '#/definitions/common.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.AppError'
      security:
      - BearerAuth: []
      summary: Soft-delete a blog by id
      tags:
      - blogs
    get:
      consumes:
      - application/json
      description: Get blog details by ID with author information
      parameters:
      - description: Blog ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.BlogWithAuthor'
              type: object
        "404":
          description: Blog not found
          schema:
            $ref: '#/definitions/common.Response'
      summary: Get blog by ID
      tags:
      - blogs
    put:
      consumes:
      - multipart/form-data
      description: Update blog fields by ID including image. Only blog author can
        update their own blog.
      parameters:
      - description: Blog ID
        in: path
        name: id
        required: true
        type: integer
      - description: Blog title
        in: formData
        name: title
        type: string
      - description: Blog HTML content
        in: formData
        name: content
        type: string
      - description: Blog status (draft or published)
        in: formData
        name: status
        type: string
      - description: Blog image
        in: formData
        name: image
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  type: boolean
              type: object
        "403":
          description: Forbidden - not blog author
          schema:
            $ref: '#/definitions/common.Response'
        "404":
          description: Blog not found
          schema:
            $ref: '#/definitions/common.Response'
      security:
      - BearerAuth: []
      summary: Update a blog by ID
      tags:
      - blogs
  /categories:
    get:
      description: Returns all active categories by default.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.Response'
        "500":
          description: Internal error
          schema:
            $ref: '#/definitions/common.AppError'
      summary: List all categories
      tags:
      - categories
    post:
      consumes:
      - application/json
      description: Create a new category with unique name. Field `status` defaults
        to `active` if omitted.
      parameters:
      - description: Category data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.CategoryCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/common.Response'
        "400":
          description: Invalid payload or name existed
          schema:
            $ref: '#/definitions/common.AppError'
        "500":
          description: Internal error
          schema:
            $ref: '#/definitions/common.AppError'
      security:
      - BearerAuth: []
      summary: Create a new category
      tags:
      - categories
  /categories/{id}:
    delete:
      description: Set status to `deactive` instead of removing the record.
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.AppError'
      security:
      - BearerAuth: []
      summary: Soft-delete a category by id
      tags:
      - categories
    get:
      description: Return a single active category by numeric id. Soft-deleted categories
        are excluded.
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.Response'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/common.AppError'
        "500":
          description: Internal error
          schema:
            $ref: '#/definitions/common.AppError'
      summary: Get category by id
      tags:
      - categories
    put:
      consumes:
      - application/json
      description: Partial update for category fields. Name must remain unique.
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Category update payload
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.CategoryUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.Response'
        "400":
          description: Invalid payload
          schema:
            $ref: '#/definitions/common.AppError'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/common.AppError'
      security:
      - BearerAuth: []
      summary: Update a category
      tags:
      - categories
  /login:
    post:
      consumes:
      - application/json
      description: Login with username/email and password to get access token
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/model.UserLogin'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data: {}
              type: object
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/common.Response'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/common.Response'
      summary: User login
      tags:
      - users
  /order-items:
    post:
      consumes:
      - application/json
      description: Add a new item to an existing order (only for pending orders)
      parameters:
      - description: Order item information
        in: body
        name: orderItem
        required: true
        schema:
          $ref: '#/definitions/mocau-backend_module_orderitem_model.OrderItemCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.OrderItem'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.Response'
      security:
      - BearerAuth: []
      summary: Add item to order
      tags:
      - order-items
  /order-items/{id}:
    delete:
      consumes:
      - application/json
      description: Delete order item from order (only for pending orders)
      parameters:
      - description: Order Item ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.Response'
      security:
      - BearerAuth: []
      summary: Delete order item
      tags:
      - order-items
    get:
      consumes:
      - application/json
      description: Get order item details by ID
      parameters:
      - description: Order Item ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.OrderItem'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.Response'
      security:
      - BearerAuth: []
      summary: Get order item by ID
      tags:
      - order-items
    put:
      consumes:
      - application/json
      description: Update order item information (only for pending orders)
      parameters:
      - description: Order Item ID
        in: path
        name: id
        required: true
        type: integer
      - description: Order item update data
        in: body
        name: orderItem
        required: true
        schema:
          $ref: '#/definitions/model.OrderItemUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.OrderItem'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.Response'
      security:
      - BearerAuth: []
      summary: Update order item
      tags:
      - order-items
  /order-items/{id}/quantity:
    put:
      consumes:
      - application/json
      description: Update order item quantity (only for pending orders)
      parameters:
      - description: Order Item ID
        in: path
        name: id
        required: true
        type: integer
      - description: Quantity update data
        in: body
        name: quantity
        required: true
        schema:
          additionalProperties:
            type: integer
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.OrderItem'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.Response'
      security:
      - BearerAuth: []
      summary: Update order item quantity
      tags:
      - order-items
  /order-items/bulk:
    delete:
      consumes:
      - application/json
      description: Delete multiple order items at once
      parameters:
      - description: Order item IDs to delete
        in: body
        name: ids
        required: true
        schema:
          items:
            type: integer
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.Response'
      security:
      - BearerAuth: []
      summary: Bulk delete order items
      tags:
      - order-items
    post:
      consumes:
      - application/json
      description: Add multiple items to an order at once
      parameters:
      - description: Order items to create
        in: body
        name: items
        required: true
        schema:
          items:
            $ref: '#/definitions/mocau-backend_module_orderitem_model.OrderItemCreate'
          type: array
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/common.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.Response'
      security:
      - BearerAuth: []
      summary: Bulk create order items
      tags:
      - order-items
    put:
      consumes:
      - application/json
      description: Update multiple order items at once
      parameters:
      - description: Order item updates
        in: body
        name: updates
        required: true
        schema:
          additionalProperties:
            $ref: '#/definitions/model.OrderItemUpdate'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.Response'
      security:
      - BearerAuth: []
      summary: Bulk update order items
      tags:
      - order-items
  /order-items/order/{order_id}:
    get:
      consumes:
      - application/json
      description: Get all items in a specific order
      parameters:
      - description: Order ID
        in: path
        name: order_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.OrderItem'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.Response'
      security:
      - BearerAuth: []
      summary: List order items by order ID
      tags:
      - order-items
  /orders:
    get:
      consumes:
      - application/json
      description: Get list of orders with filtering
      parameters:
      - description: Order status (pending, confirmed, completed, cancelled)
        in: query
        name: status
        type: string
      - description: Processed by user ID
        in: query
        name: processed_by
        type: integer
      - description: Customer phone number
        in: query
        name: customer_phone
        type: string
      - description: Order number
        in: query
        name: order_number
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Order'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.Response'
      summary: List orders
      tags:
      - orders
    post:
      consumes:
      - application/json
      description: Create a new order with customer information and optional order
        items
      parameters:
      - description: Order information with optional order items
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/model.OrderCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Order'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.Response'
      summary: Create a new order
      tags:
      - orders
  /orders/{id}:
    delete:
      consumes:
      - application/json
      description: Delete order (only pending orders can be deleted)
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.Response'
      security:
      - BearerAuth: []
      summary: Delete order
      tags:
      - orders
    get:
      consumes:
      - application/json
      description: Get order details by order ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Order'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.Response'
      summary: Get order by ID
      tags:
      - orders
    put:
      consumes:
      - application/json
      description: Update order information
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      - description: Order update data
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/model.OrderUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Order'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.Response'
      security:
      - BearerAuth: []
      summary: Update order
      tags:
      - orders
  /orders/{id}/status:
    put:
      consumes:
      - application/json
      description: Update order status (pending -> confirmed -> completed)
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      - description: Status update data
        in: body
        name: status
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Order'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.Response'
      security:
      - BearerAuth: []
      summary: Update order status
      tags:
      - orders
  /orders/number/{order_number}:
    get:
      consumes:
      - application/json
      description: Get order details by order number
      parameters:
      - description: Order Number
        in: path
        name: order_number
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Order'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.Response'
      summary: Get order by order number
      tags:
      - orders
  /orders/search:
    get:
      consumes:
      - application/json
      description: Advanced search for orders with multiple filters
      parameters:
      - description: Search in customer name, phone, order number
        in: query
        name: query
        type: string
      - description: Order status
        in: query
        name: status
        type: string
      - description: Processed by user ID
        in: query
        name: processed_by
        type: integer
      - description: Date from (YYYY-MM-DD)
        in: query
        name: date_from
        type: string
      - description: Date to (YYYY-MM-DD)
        in: query
        name: date_to
        type: string
      - description: Minimum amount
        in: query
        name: min_amount
        type: number
      - description: Maximum amount
        in: query
        name: max_amount
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Order'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.Response'
      security:
      - BearerAuth: []
      summary: Search orders
      tags:
      - orders
  /orders/stats:
    get:
      consumes:
      - application/json
      description: Get order statistics including counts and revenue
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  $ref: '#/definitions/storage.OrderStats'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.Response'
      security:
      - BearerAuth: []
      summary: Get order statistics
      tags:
      - orders
  /products:
    get:
      consumes:
      - application/json
      description: Retrieve all products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Product'
                  type: array
              type: object
      summary: List all products
      tags:
      - products
    post:
      consumes:
      - multipart/form-data
      description: Create a new product with name, description, price, stock, category
        and image
      parameters:
      - description: Product name
        in: formData
        name: name
        required: true
        type: string
      - description: Product description
        in: formData
        name: description
        type: string
      - description: Product price
        in: formData
        name: price
        required: true
        type: number
      - description: Product stock
        in: formData
        name: stock
        required: true
        type: integer
      - description: Category ID
        in: formData
        name: category_id
        type: integer
      - description: Product image
        in: formData
        name: image
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Product created successfully
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  type: integer
              type: object
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/common.Response'
      security:
      - BearerAuth: []
      summary: Create a new product
      tags:
      - products
  /products/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve product details by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Product'
              type: object
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/common.Response'
      summary: Get product by ID
      tags:
      - products
    put:
      consumes:
      - multipart/form-data
      description: Update product fields by ID including image
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Product name
        in: formData
        name: name
        type: string
      - description: Product description
        in: formData
        name: description
        type: string
      - description: Product price
        in: formData
        name: price
        type: number
      - description: Product stock
        in: formData
        name: stock
        type: integer
      - description: Category ID
        in: formData
        name: category_id
        type: integer
      - description: Product image
        in: formData
        name: image
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  type: boolean
              type: object
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/common.Response'
      security:
      - BearerAuth: []
      summary: Update a product by ID
      tags:
      - products
  /profile:
    get:
      consumes:
      - application/json
      description: Get current user profile information
      produces:
      - application/json
      responses:
        "200":
          description: User profile retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.User'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.Response'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - users
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user with username, email and password
      parameters:
      - description: User registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.UserCreate'
      produces:
      - application/json
      responses:
        "200":
          description: User created successfully
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  type: integer
              type: object
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/common.Response'
        "409":
          description: Email or username already exists
          schema:
            $ref: '#/definitions/common.Response'
      summary: Register a new user
      tags:
      - users
  /users:
    get:
      consumes:
      - application/json
      description: Get a list of all users with optional filtering
      parameters:
      - description: Filter by status
        in: query
        name: status
        type: string
      - description: Filter by role
        in: query
        name: role
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Users retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.User'
                  type: array
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/common.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common.Response'
      security:
      - BearerAuth: []
      summary: List all users
      tags:
      - users
  /users/{id}/profile:
    put:
      consumes:
      - application/json
      description: Update user profile information (full_name, phone, email)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Profile update request
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/model.UserUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: User profile updated successfully
          schema:
            $ref: '#/definitions/common.Response'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/common.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/common.Response'
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - users
  /users/{id}/toggle-status:
    put:
      consumes:
      - application/json
      description: Toggle user status between active and inactive
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User status toggled successfully
          schema:
            $ref: '#/definitions/common.Response'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/common.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/common.Response'
      security:
      - BearerAuth: []
      summary: Toggle user status
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
