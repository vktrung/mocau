basePath: /v1
definitions:
  common.Response:
    properties:
      data: {}
      filter: {}
      paging: {}
    type: object
  common.UID:
    type: object
  model.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      id:
        $ref: '#/definitions/common.UID'
      phone:
        type: string
      role:
        $ref: '#/definitions/model.UserRole'
      updated_at:
        type: string
      username:
        type: string
    type: object
  model.UserCreate:
    properties:
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      id:
        $ref: '#/definitions/common.UID'
      password:
        type: string
      phone:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  model.UserLogin:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  model.UserRole:
    enum:
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - RoleUser
    - RoleAdmin
host: localhost:3000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API documentation for Mocau Backend
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Mocau Backend API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Login with username/email and password to get access token
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/model.UserLogin'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data: {}
              type: object
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/common.Response'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/common.Response'
      summary: User login
      tags:
      - users
  /profile:
    get:
      consumes:
      - application/json
      description: Get current user profile information
      produces:
      - application/json
      responses:
        "200":
          description: User profile retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.User'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.Response'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - users
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user with username, email and password
      parameters:
      - description: User registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.UserCreate'
      produces:
      - application/json
      responses:
        "200":
          description: User created successfully
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  type: integer
              type: object
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/common.Response'
        "409":
          description: Email or username already exists
          schema:
            $ref: '#/definitions/common.Response'
      summary: Register a new user
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
